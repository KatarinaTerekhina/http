Знать методы HTTP. Досконально. 
 - какие есть Header'ы
Заголовки – это специальные параметры, которые несут определенную служебную информацию о соединении по HTTP. Некоторые заголовки имеют лишь информационный характер для пользователя или для компьютера, другие передают определенные команды, исходя из которых, сервер или клиент будет выполнять какие-то действия.
В зависимости от того, где эти заголовки могут находиться, они разделяются на:
General Headers (Основные заголовки) — должны быть и в запросах и в ответах клиента и сервера.
Request Headers (Заголовки запроса) — используются только в запросах клиента.
Response Headers (Заголовки ответа) — используются только в ответах сервера.
Entity Headers (Заголовки сущности) — сопровождают каждую сущность сообщения.
Каждый заголовок имеет следующий вид:
параметр: значение
Немного о правилах написания, что нужно иметь в виду:
1) Регистр (большие или маленькие буквы) здесь не учитываются. Можно писать и так и так.
2) Пишутся латинскими буквами.
3) После параметра должен идти символ двоеточия (:)
4) Окончанием пары «параметр:значение» служит символ переноса строки.
Вот, примеры некоторых заголовков:
Host: webkyrs.info
User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:18.0) Gecko/20100101 Firefox/18.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3

 - где есть body где его нету
GET - запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные. Не имеет тела.

POST - используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере. Имеет тело.
PUT - заменяет все текущие представления ресурса данными запроса.
DELETE - удаляет указанный ресурс.

PATCH - используется для частичного изменения ресурса.
GET
Метод GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.
HEAD
HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.
POST
POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.
PUT
PUT заменяет все текущие представления ресурса данными запроса.
DELETE
DELETE удаляет указанный ресурс.
CONNECT
CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.
OPTIONS
OPTIONS используется для описания параметров соединения с ресурсом.
TRACE
TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.
PATCH
PATCH используется для частичного изменения ресурса.
Метод	Краткое описание
OPTIONS	Используется для определения возможностей веб-сервера или параметров соединения для конкретного ресурса. Предполагается, что запрос клиента может содержать тело сообщения для указания интересующих его сведений. Формат тела и порядок работы с ним в настоящий момент не определён. Сервер пока должен его игнорировать. Аналогичная ситуация и с телом в ответе сервера.
Для того чтобы узнать возможности всего сервера, клиент должен указать в URI звёздочку — «*». Запросы «OPTIONS * HTTP/1.1» могут также применяться для проверки работоспособности сервера (аналогично «пингованию») и тестирования на предмет поддержки сервером протокола HTTP версии 1.1.
Результат выполнения этого метода не кэшируется.
GET	Используется для запроса содержимого указанного ресурса. С помощью метода GET можно также начать какой-либо процесс. В этом случае в тело ответного сообщения следует включить информацию о ходе выполнения процесса. Клиент может передавать параметры выполнения запроса в URI целевого ресурса после символа «?»: GET /path/resource?param1=value1¶m2=value2 HTTP/1.1
Согласно стандарту HTTP, запросы типа GET считаются идемпотентными[4] — многократное повторение одного и того же запроса GET должно приводить к одинаковым результатам (при условии, что сам ресурс не изменился за время между запросами). Это позволяет кэшировать ответы на запросы GET.
Кроме обычного метода GET, различают ещё условный GET и частичный GET. Условные запросы GET содержат заголовки If-Modified-Since, If-Match, If-Range и подобные. Частичные GET содержат в запросе Range. Порядок выполнения подобных запросов определён стандартами отдельно.
HEAD	Аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. Запрос HEAD обычно применяется для извлечения метаданных, проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.
Заголовки ответа могут кэшироваться. При несовпадении метаданных ресурса с соответствующей информацией в кэше копия ресурса помечается как устаревшая.
POST	Применяется для передачи пользовательских данных заданному ресурсу. Например, в блогах посетители обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются серверу методом POST и он помещает их на страницу. При этом передаваемые данные (в примере с блогами — текст комментария) включаются в тело запроса. Аналогично с помощью метода POST обычно загружаются файлы.
В отличие от метода GET, метод POST не считается идемпотентным[4], то есть многократное повторение одних и тех же запросов POST может возвращать разные результаты (например, после каждой отправки комментария будет появляться одна копия этого комментария).
При результатах выполнения 200 (Ok) и 204 (No Content) в тело ответа следует включить сообщение об итоге выполнения запроса. Если был создан ресурс, то серверу следует вернуть ответ 201 (Created) с указанием URI нового ресурса в заголовке Location.
Сообщение ответа сервера на выполнение метода POST не кэшируется.
PUT	Применяется для загрузки содержимого запроса на указанный в запросе URI. Если по заданному URI не существовало ресурса, то сервер создаёт его и возвращает статус 201 (Created). Если же был изменён ресурс, то сервер возвращает 200 (Ok) или 204 (No Content). Сервер не должен игнорировать некорректные заголовки Content-* передаваемые клиентом вместе с сообщением. Если какой-то из этих заголовков не может быть распознан или не допустим при текущих условиях, то необходимо вернуть код ошибки 501 (Not Implemented).
Фундаментальное различие методов POST и PUT заключается в понимании предназначений URI ресурсов. Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. Используя PUT, клиент предполагает, что загружаемое содержимое соответствуют находящемуся по данному URI ресурсу.
Сообщения ответов сервера на метод PUT не кэшируются.
PATCH	Аналогично PUT, но применяется только к фрагменту ресурса.
DELETE	Удаляет указанный ресурс.
TRACE	Возвращает полученный запрос так, что клиент может увидеть, что промежуточные сервера добавляют или изменяют в запросе.
LINK	Устанавливает связь указанного ресурса с другими.
UNLINK	Убирает связь указанного ресурса с другими.
•	GET - запрос содержимого указанного ресурса. Может кешироваться.
•	HEAD HTTP запрос - аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело. Проверка наличия ресурса. Может кэшироваться.
•	Метод HTTP POST - применяется для передачи пользовательских данных заданному ресурсу. Не кэшируется.
•	OPTIONS - запрашивает информацию о коммуникационных параметрах сервера. Чтобы запросить данные обо всем сервере в целом, вместо URI запроса следует использовать символ *.
•	PUT - помещает тело содержимого запроса по указанному URI.
•	PATCH - аналогично PUT, но применяется только к фрагменту ресурса.
•	DELETE - удаляет данные, находящиеся на сервере.
•	TRACE - требует, чтобы тело содержимого запроса было возвращено без изменений. Используется для отладки.
•	LINK - связывает информацию заголовка с документом на сервере.
•	UNLINK - о связь информации заголовка с документом на сервере.
Последней частью запроса является его тело. Оно бывает не у всех запросов: запросы, собирающие (fetching) ресурсы, такие как GET, HEAD, DELETE, или OPTIONS, в нем обычно не нуждаются. Но некоторые запросы отправляют на сервер данные для обновления, как это часто бывает с запросами POST (содержащими данные HTML-форм).
Тела можно грубо разделить на две категории:
•	Одноресурсные тела (Single-resource bodies), состоящие из одного отдельного файла, определяемого двумя заголовками: Content-Type и Content-Length.
•	Многоресурсные тела (Multiple-resource bodies), состоящие из множества частей, каждая из которых содержит свой бит информации. Они обычно связаны с HTML-формами .

 - какого размера может быть body
Тела можно разделить на три категории:
•	Одноресурсные тела (Single-resource bodies), состоящие из отдельного файла известной длины, определяемые двумя заголовками: Content-Type и Content-Length.
•	Одноресурсные тела (Single-resource bodies), состоящие из отдельного файла неизвестной длины, разбитого на небольшие части (chunks) с заголовком Transfer-Encoding (en-US), значением которого  является chunked.
•	Многоресурсные тела (Multiple-resource bodies), состоящие из многокомпонентного тела, каждая часть которого содержит свой сегмент информации. Они относительно редки.

 - какого размера может быть URL
Браузеры
Microsoft Internet Explorer: Начиная с четвертой версии браузера, максимальная длина воспринимаемого URL составляет 2,083 символов. При этом длина GET-запроса лимитирована 2,048 символа. На POST никаких ограничений, понятное дело, не накладывается.
Firefox: В старых версиях (1.5.x) было ограничение на 64 килобайта, но, вполне возможно, это был баг, который позже исправили. Теперь, по всей видимости, ограничения на длину URL снято вообще, либо оно существенно превышает «пределы разумного» (проверено, что Firefox может «съесть» URL длиной в 100,000 символов).
Safari: Лимита на длину URL нет так же, как и в Firefox. Автор FAQ успешно протестировал адрес длиной 80,000 символов.
Opera:** По заявлению разработчиков, лимита нет. Успешно прошли тесты с 190,000 символами.
Серверы
Apache: Строго говоря, ограничение длины URL можно менять в конфигурации сервера параметрами LimitRequest*, поэтому все зависит от конкретного случая. Но существуют значения по-умолчанию, которые часто оставляют неизменными. Они лимитируют длину URL (точнее, любой строки HTTP-запроса) значением в 8 килобайт. В более ранних версиях Apache было 4 килобайта.
Microsoft Internet Information Server: По-умолчанию, длина URL ограничена пределом в 16 килобайт. При необходимости, значение можно увеличить. Немного странно, что сервер Microsoft не накладывает столь же жестких ограничений на этот параметр, как и браузер.
Perl HTTP::Daemon: 8,000 символов на длину URL и 16 килобайт для суммарного объема HTTP-заголовка. Лимит несложно снять, для чего потребуется откорректировать значения 16×1024 в файле Daemon.pm.
Общие рекомендации
Принимая во внимание приведенные сведения, конечно же не стоит использовать URL длиной более 2,000 символов. В противном случае такие ссылки не будут работать примерно у 60% пользователей интернет.
Чаще всего, этой величины будет вполне хватать, т.к. если речь идет о передаче большого объема информации с клиента на сервер, по многим причинам (для безопасности, например) рекомендуется отдавать предпочтение методу POST. То-есть делать так:
<form action="myscript.php" method="POST">
...
</form>
GET же предназначен для адресации страниц с динамическим контентом, чье содержимое не меняется при каждом повторном обращении. Самый распространенный тому пример — отчеты поисковых систем.
В общем случае, если данные не требуются для повторной генерации идентичной веб-страницы, такие данные не должны быть частью URL.
Когда необходимость в объемных URL все-таки присутствует, можно использовать разные алгоритмы кодирования для сокращения их длины. Один из примеров был приведен в уже упоминавшемся посте о Google Chart, на примере специального формата записи данных для построения диаграмм. В особо-тяжелых случаях можно сжимать данные gzip-ом с последующим кодированием в BASE64, но лучше, конечно, по возможности избегать таких вещей. Более красивым решением может быть использование базы данных для хранения на сервере параметров каждого запроса. В таком случае URL сможет содержать только короткий идентификатор необходимой записи.

 - какой из них идемпотентный, какой нет.
Идемпотентность - это свойство объекта или операции при повторном применении операции к объекту давать тот же результат, что и при первом.
Идемпотентные методы - GET, HEAD, OPTIONS, TRACE, +(Небезопасные PUT или DELETE).
Каждый реализует свою семантику, но каждая группа команд разделяет общие свойства: так, методы могут быть безопасными (не изменяют состояния сервера – GET, HEAD, OPTIONS), идемпотентными (возвращают один и тот же результат на идентичный запрос – GET, HEAD, PUT, DELETE) или кэшируемыми.
